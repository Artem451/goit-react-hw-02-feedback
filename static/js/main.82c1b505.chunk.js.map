{"version":3,"sources":["components/FeedbackOptions.jsx","components/Section.jsx","components/Statistics.jsx","components/Notification.jsx","App.jsx","index.js"],"names":["FeedbackOptions","onGoodClick","onNeutralClick","onBadClick","className","type","onClick","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","goodFeedback","setState","prevState","neutralFeedback","badFeedback","this","toFixed","countTotalFeedback","percent","countPositiveFeedbackPercentage","React","Component","ReactDOM","render","document","querySelector"],"mappings":"gOAeeA,MAZf,YAAsE,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WACpD,OACI,mCACI,qBAAIC,UAAU,mBAAd,UACA,6BAAI,wBAAQA,UAAU,kBAAkBC,KAAK,SAASC,QAAWL,EAA7D,oBACJ,6BAAI,wBAAQG,UAAU,kBAAkBC,KAAK,SAASC,QAAWJ,EAA7D,uBACJ,6BAAI,wBAAQE,UAAU,kBAAkBC,KAAK,SAASC,QAAWH,EAA7D,yBCEDI,MATf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrB,OACE,oCACE,6BAAKD,IACJC,MCUMC,MAdf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC7C,OACI,mCACA,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,aCAGC,MARf,YAAmC,IAAXC,EAAU,EAAVA,QACpB,OACI,mCACI,+BAAOA,OCqEJC,E,4MAlEXC,MAAQ,CACJR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,aAAe,WACX,EAAKC,UAAS,SAACC,GACX,MAAO,CACHX,KAAMW,EAAUX,KAAO,O,EAKnCY,gBAAkB,WACd,EAAKF,UAAS,SAACC,GACX,MAAO,CACLV,QAASU,EAAUV,QAAU,O,EAKvCY,YAAc,WACV,EAAKH,UAAS,SAACC,GACX,MAAO,CACLT,IAAKS,EAAUT,IAAM,O,wDAK/B,WACG,OAAQY,KAAKN,MAAMP,QAAUa,KAAKN,MAAMR,KAAOc,KAAKN,MAAMN,M,6CAG7D,WACI,OAAUY,KAAKN,MAAMR,MAAQc,KAAKN,MAAMP,QAAUa,KAAKN,MAAMN,IAAMY,KAAKN,MAAMR,MAAS,KAAKe,QAAQ,K,oBAG1G,WACI,IAAMZ,EAAQW,KAAKE,qBACbC,EAAUH,KAAKI,kCAErB,OACI,qCACA,cAAC,EAAD,CAASrB,MAAQ,wBAAjB,SACI,cAAC,EAAD,CACIP,YAAewB,KAAKL,aACpBlB,eAAkBuB,KAAKF,gBACvBpB,WAAcsB,KAAKD,gBAG3B,cAAC,EAAD,CAAShB,MAAQ,YAAjB,SACMiB,KAAKN,MAAMN,KAAOY,KAAKN,MAAMR,MAAQc,KAAKN,MAAMP,QAAW,cAAC,EAAD,CACzDD,KAAMc,KAAKN,MAAMR,KACjBC,QAASa,KAAKN,MAAMP,QACpBC,IAAKY,KAAKN,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBa,IAExB,cAAC,EAAD,CAAcX,QAAU,+B,GA5DtBa,IAAMC,W,sBCJxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.82c1b505.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction FeedbackOptions ({onGoodClick, onNeutralClick, onBadClick}) {\r\n    return (\r\n        <>\r\n            <ul className='control-feedback'>\r\n            <li><button className='feedback-button' type='button' onClick = {onGoodClick}>Good</button></li>\r\n            <li><button className='feedback-button' type='button' onClick = {onNeutralClick}>Neutral</button></li>\r\n            <li><button className='feedback-button' type='button' onClick = {onBadClick}>Bad</button></li>\r\n            </ul>\r\n        </> \r\n    )\r\n}\r\n\r\nexport default FeedbackOptions","import React from 'react';\r\n\r\nfunction Section({title, children}) {\r\n    return ( \r\n      <section>\r\n        <h2>{title}</h2>\r\n        {children}\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Section","import React from 'react';\r\n\r\nfunction Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n    return (\r\n        <>\r\n        <ul>\r\n            <li>Good: {good}</li>\r\n            <li>Neutral: {neutral}</li>\r\n            <li>Bad: {bad}</li>\r\n            <li>Total: {total}</li>\r\n            <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n        </> \r\n    )\r\n}\r\n\r\nexport default Statistics","import React from 'react'\r\n\r\nfunction Notification ({message}) {\r\n    return (\r\n        <>\r\n            <span>{message}</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from \"react\"\nimport FeedbackOptions from './components/FeedbackOptions'\nimport Section from \"./components/Section\"\nimport Statistics from \"./components/Statistics\"\nimport Notification from \"./components/Notification\"\n\n\nclass App extends React.Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n      }\n\n      goodFeedback = () => {\n          this.setState((prevState) => {\n              return {\n                  good: prevState.good + 1\n              }\n          })\n      }\n\n      neutralFeedback = () => {\n          this.setState((prevState) => {\n              return {\n                neutral: prevState.neutral + 1\n              }\n          })\n      }\n\n      badFeedback = () => {\n          this.setState((prevState) => {\n              return {\n                bad: prevState.bad + 1\n              }\n          })\n      }\n\n      countTotalFeedback() {\n         return (this.state.neutral + this.state.good + this.state.bad)\n      }\n\n      countPositiveFeedbackPercentage () {\n          return (((this.state.good / (this.state.neutral + this.state.bad + this.state.good)) * 100).toFixed(2))\n      }\n\n    render() {\n        const total = this.countTotalFeedback()\n        const percent = this.countPositiveFeedbackPercentage()\n        \n        return (\n            <>\n            <Section title ={'Please leave feedback'}>\n                <FeedbackOptions\n                    onGoodClick = {this.goodFeedback}\n                    onNeutralClick = {this.neutralFeedback}\n                    onBadClick = {this.badFeedback}\n                />\n            </Section>\n            <Section title ={'Statistic'}>\n                {(this.state.bad || this.state.good || this.state.neutral) ? <Statistics\n                    good={this.state.good} \n                    neutral={this.state.neutral} \n                    bad={this.state.bad} \n                    total={total} \n                    positivePercentage={percent}\n                /> : \n                <Notification message = \"No feedback given\"/>}\n            </Section>\n            </>\n        )\n    }\n}\n\nexport default App","import App from \"./App\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}